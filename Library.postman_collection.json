{
	"info": {
		"_postman_id": "2f35ca50-a587-49bf-9bf4-7baf71f0c7ca",
		"name": "Library",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25038500"
	},
	"item": [
		{
			"name": "Post Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"book_id\", jsonData.ID)\r",
							"var req = JSON.parse(pm.request.body.raw)\r",
							"\r",
							"function cleanupscript(){\r",
							"    const book_id = generate_id()\r",
							"    pm.environment.set(\"book_id\", book_id)\r",
							"    postman.setNextRequest(DeleteBook)\r",
							"}\r",
							"\r",
							"function generate_id(){\r",
							"    const expected_id = req.isbn + req.aisle\r",
							"    return expected_id\r",
							"}\r",
							"\r",
							"pm.test(\"Validate status code is 200\", function(){\r",
							"    try{\r",
							"        pm.response.to.have.status(200)\r",
							"        pm.expect(jsonData).have.property(\"msg\")\r",
							"        pm.expect(jsonData.msg).to.eql(\"successfully added\")\r",
							"    }\r",
							"    catch(err){\r",
							"        if(jsonData.msg.includes(\"exists\")){\r",
							"            cleanupscript()\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Header cookies reponse time validation\", function(){\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\")\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(1200)\r",
							"    // pm.response.text().to.include(\"successfully added\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//RSa423564\r",
							"\r",
							"console.log(pm.globals.get(\"company_code\"))\r",
							"const code = pm.globals.get(\"company_code\")\r",
							"const val = pm.variables.replaceIn('{{$randomInt}}')\r",
							"pm.collectionVariables.set(\"isbn\", code+val)\r",
							"pm.collectionVariables.set(\"author_name\", pm.iterationData.get(\"BookName\"))\r",
							"pm.collectionVariables.set(\"book_name\",pm.iterationData.get(\"Author\"))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// {\r\n// \"name\":\"a\",\r\n// \"isbn\":\"{{isbn}}\",\r\n// \"aisle\":\"227123\",\r\n// \"author\":\"{{author_name}}\"\r\n// }\r\n\r\n{\r\n\"name\":\"a\",\r\n\"isbn\":\"isbm\",\r\n\"aisle\":\"227123\",\r\n\"author\":\"author_name\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Request Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getBookResponse = pm.response.json();\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"author\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\",\r",
							"        \"author\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"};\r",
							"pm.test(\"validate json response logic\", function(){\r",
							"    console.log(getBookResponse)\r",
							"    pm.expect(getBookResponse[0].author).to.eql(pm.collectionVariables.get(\"author_name\"))\r",
							"})\r",
							"\r",
							"pm.test(\"validate json schema\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{book_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"validate the response status and message\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.msg).to.eql(\"book is successfully deleted\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ID\":\"{{book_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "author_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "book_name",
			"value": "",
			"type": "string"
		}
	]
}